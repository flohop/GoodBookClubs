# Generated by Django 2.2.11 on 2020-03-21 16:55

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_name', models.CharField(max_length=50)),
                ('book_author', models.CharField(max_length=50)),
                ('book_description', models.TextField(blank=True, max_length=1000, null=True)),
                ('book_release_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2020)])),
                ('book_language', models.CharField(blank=True, max_length=25, null=True)),
                ('book_cover_image', models.ImageField(default='images/book_covers/no_cover.png', upload_to='images/book_covers/')),
                ('book_isbn_number', models.CharField(max_length=17)),
                ('book_page_number', models.IntegerField()),
                ('book_read_pages', models.IntegerField(blank=True, null=True)),
                ('amazon_link', models.URLField(blank=True, null=True)),
            ],
            options={
                'ordering': ['book_name'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(default='images/profile_pictures/no_img.png', upload_to='images/profile_pictures/')),
                ('profile_description', models.TextField(blank=True, max_length=500)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecommendationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=100)),
                ('is_private_group', models.BooleanField(default=False)),
                ('group_image', models.ImageField(default='images/group_pictures/no_img.png', upload_to='images/group_pictures/')),
            ],
            options={
                'ordering': ['group_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReadingGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=100)),
                ('is_private_group', models.BooleanField(default=False)),
                ('group_image', models.ImageField(default='images/group_pictures/no_img.png', upload_to='images/group_pictures/')),
                ('reading_goal', models.IntegerField(blank=True, null=True)),
                ('reading_goal_chapter_name', models.CharField(blank=True, max_length=30, null=True)),
                ('current_book', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='club.Book')),
                ('group_creator', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reading_group_creator', to='club.Profile')),
                ('group_members', models.ManyToManyField(to='club.Profile')),
            ],
            options={
                'ordering': ['group_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_name', models.CharField(max_length=50)),
                ('related_genres', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='club.Genre')),
            ],
            options={
                'ordering': ['genre_name'],
            },
        ),
        migrations.CreateModel(
            name='DiscussionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=100)),
                ('is_private_group', models.BooleanField(default=False)),
                ('group_image', models.ImageField(default='images/group_pictures/no_img.png', upload_to='images/group_pictures/')),
                ('current_book', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='club.Book')),
                ('group_creator', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='discussion_group_creator', to='club.Profile')),
                ('group_members', models.ManyToManyField(to='club.Profile')),
            ],
            options={
                'ordering': ['group_name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='book',
            name='book_genre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='club.Genre'),
        ),
        migrations.AddField(
            model_name='book',
            name='people_read_book',
            field=models.ManyToManyField(blank=True, related_name='people_read_book', to='club.Profile'),
        ),
        migrations.AddField(
            model_name='book',
            name='people_reading_book',
            field=models.ManyToManyField(blank=True, related_name='people_reading_book', to='club.Profile'),
        ),
        migrations.AddField(
            model_name='book',
            name='people_want_to_read_book',
            field=models.ManyToManyField(blank=True, related_name='people_want_to_read_book', to='club.Profile'),
        ),
    ]
