Index: book/static/book/book_search_add_list.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>$(window).on('load', function() {\n\nvar chosenBookIndex;\nfunction bookSearch() {\n\n    var search = document.getElementById('search').value;\n    search.innerHTML = \"\";\n    document.getElementById('results').innerHTML = \"\";\n    var results = document.getElementById('results');\n    var tableBody =  document.getElementById('results-table').getElementsByTagName('tbody')[0];\n    tableBody.innerHTML = \"\";\n    items = null;\n\n    $.ajax({\n        url: \"https://www.googleapis.com/books/v1/volumes?q=\" + search,\n        dataType: \"json\",\n\n        success: function(data) {\n            items = data.items;\n            $(\"#results-table\").removeClass(\"remove\");\n            $(\"th .remove\").removeClass(\"remove\");\n            for(i=0; i< data.items.length; i++) {\n                var newRow = tableBody.insertRow();\n                newRow.className = \"data-row\"\n\n                var newCell = newRow.insertCell(0);\n                try {\n                    var newText = document.createTextNode(data.items[i].volumeInfo.title);\n                }\n                catch(TypeError) {\n                    newCell.className = document.createTextNode(\" \");\n                }\n                newCell.appendChild(newText);\n\n                var newCell = newRow.insertCell();\n                newCell.className = \"author\";\n                try{\n                    var newText = document.createTextNode(data.items[i].volumeInfo.authors[0]);\n                }\n                catch(TypeError) {\n                    var newText = document.createTextNode(\"author not found\");\n                }\n                newCell.appendChild(newText);\n\n                // create button which to click\n                var clickButton = document.createElement(\"BUTTON\");\n                clickButton.innerText = \"Select\";\n                clickButton.type = \"button\";\n                clickButton.onclick = \"#\";\n\n                var newCell = newRow.insertCell();\n                newCell.className = \"select-book\"\n                newCell.appendChild(clickButton);\n            }\n            $(document.getElementById(\"results-table\")).removeClass(\"hide\");\n            $(document.getElementById(\"results-table\")).on('click', \"tr\", onRowClicked);\n            $('tr.data-row').show();\n    }\n    });\n}\n\nfunction sendValuesToServer(e) {\n    // send the changed value for the list to the server\n    target = e.target;\n    if($(target).hasClass(\"book-status\")){\n        value = target.value;\n        id = $(target).parent().data(\"id\");\n        console.log(\"Send data with id: \" + id + \" value: \" + value)\n\n        $.post(book_change_status_url,\n        {\n                id : id,\n                value: value\n        },\n        function(data){\n        if (data['status'] == 'OK')\n            {\n            if(data['can_like'] == \"True\") {\n                var bookId = data['id'];\n                $('li').find(\"[data-id='\" + bookId + \"']\").removeClass(\"hide\")\n            }\n            else {\n                var bookId = data['id'];\n                $('li').find(\"[data-id='\" + bookId + \"']\").addClass(\"hide\")\n            }\n            }\n        }\n    );\n    }\n}\n\nfunction likeBook(e, myId, myAction) {\n    $.post(book_like_url,\n        {\n            id: myId,\n            action: myAction\n        },\n        function(data) {\n            if(data['status'] == 'ok'){\n\n                // TODO: find correct Link to Like, so it can change depending on the action\n                // TODO: atm, i can't get it to work, user can't add new book and like it instantly,\n                // TODO: he has to reload the page to make it work, FIX LATER!\n\n                var bookId = data['id'];\n                var prevAction = data['prev_action'];\n                console.log(\"Likes to added books will be implemented later\");\n            }\n        }\n    );\n}\n\nfunction onRowClicked(e) {\n\n    rowItemIndex = $(e.currentTarget).index();\n\n    // detach event listener from rows\n    $(document.getElementById(\"results-table\")).off(\"click\", \"tr\", onRowClicked);\n\n    // assign value to global variable\n    chosenBookIndex = rowItemIndex;\n\n    // get the current book\n    var current_book_json = items[chosenBookIndex];\n    // hide all rows hide the select button, add the chosen item to the database and add it to the list\n    $('#results-table').addClass(\"remove\");\n    $.ajax({\n    type: 'POST',\n    dataType: 'json',\n    contentType: 'application/json;charset=utf-8',\n    url: 'add-book/',\n    data: JSON.stringify(current_book_json),\n\n    // create the new row, append it to the list and add event listeners\n    success: function(data) {\n        // add new book to list\n        if(data['status'] == 'new_book'){\n            // add new book to top of the list\n            console.log(\"Success, added book to library\");\n\n\n            // extract data from response\n            var title = data['title'];\n            var id = data['id'];\n            var author = data['author'];\n            var url = data['url'];\n\n            // create div element\n            var bookDiv = document.createElement(\"DIV\");\n\n            // create li element\n            var bookLi = document.createElement(\"LI\");\n\n            var bookLinkEl = document.createElement(\"a\");\n            bookLinkEl.href = url;\n            bookLinkEl.innerHTML = title;\n            bookLi.innerHTML = \" | \" + author + \" | \";\n            bookLi.setAttribute('data-id', id);\n\n            bookLi.insertBefore(bookLinkEl, bookLi.childNodes[0]);\n\n            var countEl = document.createElement(\"SPAN\");\n            countEl.classList.add(\"count\");\n\n            var innerCounterEl = document.createElement(\"SPAN\");\n            innerCounterEl.classList.add(\"total\");\n            innerCounterEl.innerHTML = \"0 \";\n\n            countEl.appendChild(innerCounterEl);\n            countEl.appendChild(document.createTextNode(\"likes \"));\n\n            // create the link to like\n            likeLinkEl = document.createElement(\"a\");\n            likeLinkEl.href = \"#\";\n            likeLinkEl.id = \"like-link-id\";\n            var action = \"like\"\n            likeLinkEl.setAttribute(\"data-action\", action);\n            likeLinkEl.setAttribute(\"data-id\", id);\n            likeLinkEl.classList.add(\"like\");\n            likeLinkEl.classList.add(\"button\");\n            likeLinkEl.classList.add(\"hide\"); // hide like option for as long as user isnt reading the book\n            likeLinkEl.innerHTML = \"Like\";\n\n            likeLinkEl.addEventListener(\"click\", function(e) {\n                    likeBook(e, id, action);\n            }, false);\n\n            // create the select element\n            var selectEl = document.createElement(\"SELECT\");\n            selectEl.id = \"book-status\";\n            selectEl.classList.add(\"book-status\");\n\n            // create the options\n            var optEl1 = document.createElement(\"OPTION\");\n            optEl1.value = \"reading\";\n            optEl1.classList.add(\"status\");\n            optEl1.innerHTML = \"Currently reading\";\n\n            var optEl2 = document.createElement(\"OPTION\");\n            optEl2.value = \"read\";\n            optEl2.classList.add(\"status\");\n            optEl2.innerHTML = \"Read\";\n\n            var optEl3 = document.createElement(\"OPTION\");\n            optEl3.value = \"want-to-read\";\n            optEl3.classList.add(\"status\");\n            optEl3.innerHTML = \"Want to read\";\n\n            var optEl4 = document.createElement(\"OPTION\");\n            optEl4.value = \"blank\";\n            optEl4.classList.add(\"status\");\n            optEl4.innerHTML = \"\";\n            optEl4.setAttribute(\"selected\", \"selected\");\n\n            // append <option>'s to <select>\n            selectEl.appendChild(optEl1);\n            selectEl.appendChild(optEl2);\n            selectEl.appendChild(optEl3);\n            selectEl.appendChild(optEl4);\n\n            // append all elements\n            bookLi.appendChild(countEl);\n            bookLi.appendChild(likeLinkEl);\n            bookLi.appendChild(selectEl);\n            bookDiv.appendChild(bookLi);\n\n            // append new <div> to <ul>\n            document.getElementById(\"book-list\").appendChild(bookDiv);\n            $(\"#added-books\").removeClass(\"remove\");\n            // add like event listener\n            // TODO: make the like click function a named function, register the newly created <a> element to it, so that newly\n            // created elements can get liked. Make the dashboard pretty and remove value from search field after user selects book\n            \n            // when form changes, update value in database\n            document.getElementById(\"book-list\").addEventListener(\"change\", sendValuesToServer, false);\n\n\n\n        }\n        else if(data['status'] == 'already_exists') {\n                console.log(\"Book already exists\");\n        }\n       }\n    });\n    }\n\n\n\n\ndocument.getElementById(\"button\").addEventListener(\"click\", bookSearch, false);\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- book/static/book/book_search_add_list.js	(revision c2257d9d8ad90fd85ba7bef28b96821f7984a2d1)
+++ book/static/book/book_search_add_list.js	(date 1587038361968)
@@ -144,12 +144,73 @@
             var id = data['id'];
             var author = data['author'];
             var url = data['url'];
+            var cover = data['cover'];
 
-            // create div element
+            // create container div element
+            var containerDiv = document.createElement("DIV");
+            containerDiv.addClass("container");
+            containerDiv.id = "container";
+            
+            // create book div
             var bookDiv = document.createElement("DIV");
+            bookDiv.addClass(title);
+
+            // append to container div
+            containerDiv.append(bookDiv);
 
             // create li element
             var bookLi = document.createElement("LI");
+            bookLi.id = "options";
+            bookLi.addClass("item");
+            // TODO: bookLi.setAttribute("data-index")
+            bookLi.setAttribute("data-id", id);
+            
+            // append li to bookDiv
+            bookDiv.append(bookLi);
+
+            // create img element
+            var imgEl = document.createElement("img");
+            imgEl.addClass("book-cover");
+            imgEl.setAttribute("src", cover);
+
+            // append img to li
+            bookLi.append(imgEl)
+
+            // create inner ul
+            var innerUlEl = document.createElement("ul");
+            innerUlEl.addClass("inner-ul");
+
+            // append ul to li
+            bookLi.append(innerUlEl);
+
+            // create inner li elements and append them to inner ul
+            var inLi1 = document.createElement("li");
+            inLi1.addClass("inner-li");
+            var inAEl = document.createElement("a");
+            inAEl.addClass("book-title");
+            inAEl.setAttribute("href", url);
+            inAEl.innerText = title;
+            inLi1.append(inAEl);
+
+            var inLi2 = document.createElement("li");
+            inLi2.addClass("inner-li");
+            var inSpanEl2 = document.createElement("span");
+            inSpanEl2.addClass("author");
+            inSpanEl2.innerText = author;
+            inLi2.append(inSpanEl2);
+
+            var inLi3 = document.createElement("li");
+            inLi3.addClass("inner-li");
+            var inSpanEl3 = document.createElement("span");
+            inSpanEl3.addClass("count");
+            inSpanEl3.innerText = "likes"
+            inInSpanEl3 = document.createElement("span");
+            inInSpanEl3.addClass("total");
+            inInSpanEl3.innerText = "0";
+            inSpanEl3.append(inInSpanEl3);
+            
+
+
 
             var bookLinkEl = document.createElement("a");
             bookLinkEl.href = url;
Index: book/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import JsonResponse, HttpResponse\nfrom django.views.decorators.http import require_POST\nfrom .models import Book\nimport json\nfrom itertools import chain\nimport urllib.request\nfrom account.views import Profile\nfrom django.views.decorators.clickjacking import xframe_options_sameorigin\n\n\n@login_required\ndef all_books_view(request):\n    # get all the book associated with the user in the 3 categories and show them in the template\n    user_id = request.user.id\n    user = User.objects.get(id=user_id)\n    profile = Profile.objects.get(user=user)\n\n    read_books = profile.people_read_book.all()\n    current_books = profile.people_reading_book.all()\n    want_to_read_books = profile.people_want_to_read_book.all()\n    books = read_books | current_books | want_to_read_books\n    # add attributes to all books\n    all_books = [read_books, current_books, want_to_read_books]\n    book_data = {}\n    counter = 0\n    for books in all_books:\n        for book in books:\n\n            # add number of likes the book has\n            like_balance = book.likes.all().count()\n            user_liked_book = False\n\n            # if user has read the book or is currently reading the book, let user like book\n            can_like = False\n\n            # add if the user likes this book\n            if user in book.likes.all():\n                user_liked_book = True\n\n            if book in profile.people_read_book.all():\n                status = \"read\"\n                can_like = True\n            elif book in profile.people_reading_book.all():\n                status = \"reading\"\n                can_like = True\n            elif book in profile.people_want_to_read_book.all():\n                status = \"want-to-read\"\n            else:\n                status = \"blank\"\n\n            book.can_like = can_like\n            book.status = status\n            book.index = counter\n            book.like_balance = like_balance\n            book.user_liked_book = user_liked_book\n            # replace \" \" with \"-\", so that i can use it to search by class name in html, because html classes are\n            # separated by space\n            book_data[counter] = {'name': str(book.book_name).replace(\" \", \"-\"), 'status': book.status, 'id': book.id}\n            counter += 1\n    return render(request, 'book/all_books_showcase.html', {'read_books': read_books,\n                                                            'current_books': current_books,\n                                                            'want_to_read_books': want_to_read_books,\n                                                            'books': books,\n                                                            'book_data': book_data})\n\n\ndef book_detail_view(request, id, slug):\n    book = Book.objects.get(id=id)\n\n    # add info, if user has liked the book\n    has_liked = False\n    if request.user in book.likes.all():\n        has_liked = True\n    book.has_liked = has_liked\n\n    # add the info, what groups are currently reading this book\n    book.reading_clubs = book.reading_group_book.all()\n    book.discussion_clubs = book.discussion_group_book.all()\n\n    return render(request, 'book/book_detail.html', {'book': book})\n\n\n@login_required\n@require_POST\ndef book_like(request):\n        book_id = request.POST.get(\"id\")\n        action = request.POST.get('action')\n        if book_id and action:\n            try:\n                book = Book.objects.get(id=book_id)\n                if action == 'like':\n                    book.likes.add(request.user)\n                    prev_action = \"like\"\n                else:\n                    book.likes.remove(request.user)\n                    prev_action = \"unlike\"\n                return JsonResponse({'status': 'ok', \"id\": book_id, \"prev_action\": action})\n            except:\n                pass\n        return JsonResponse({'status': 'ko', \"id\": book_id})\n\n\n# test view\ndef book_search(request):\n\n    return render(request, 'book/search_book.html', {})\n\n\n@xframe_options_sameorigin\ndef list_view(request):\n    books = Book.objects.all()\n\n    if request.user.is_authenticated:\n        user = request.user\n        profile = Profile.objects.get(user=user)\n\n        # add attribute to all book objects, which show the relation the user has to the book\n        book_data = {}\n\n        counter = 0\n\n        for book in books:\n\n            # add number of likes the book has\n            like_balance = book.likes.all().count()\n            user_liked_book = False\n\n            # if user has read the book or is currently reading the book, let user like book\n            can_like = False\n\n            # add if the user likes this book\n            if user in book.likes.all():\n                user_liked_book = True\n\n            if book in profile.people_read_book.all():\n                status = \"read\"\n                can_like = True\n            elif book in profile.people_reading_book.all():\n                status = \"reading\"\n                can_like = True\n            elif book in profile.people_want_to_read_book.all():\n                status = \"want-to-read\"\n            else:\n                status = \"blank\"\n\n            book.can_like = can_like\n            book.status = status\n            book.index = counter\n            book.like_balance = like_balance\n            book.user_liked_book = user_liked_book\n            # replace \" \" with \"-\", so that i can use it to search by class name in html, because html classes are\n            # separated by space\n            book_data[counter] = {'name': str(book.book_name).replace(\" \", \"-\"), 'status': book.status, 'id': book.id}\n            counter += 1\n\n    else:\n        profile = \"anonymous\"\n        book_data = {}\n\n    return render(request, 'book/list_view.html', {'books': books,\n                                                   'user': profile,\n                                                   'book_data': book_data})\n\n\ndef receive_json_data(request):\n    # receive the data from the ajax post, for when the user chooses a book to base is group upon\n    data = json.loads(request.body.decode('utf-8'))\n    print(data)\n\n\ndef change_book_status(request):\n    # receive AJAX call with the id of the changed book relationship and the new value\n    print(\"i got called\")\n    id = request.POST.get(\"id\")\n    status = request.POST.get(\"value\")\n    user = request.user\n    profile = Profile.objects.get(user=user)\n\n    # get the DOM of this book by the id\n    try:\n        book = Book.objects.get(id=id)\n\n        # remove the user from the old M2M relationship\n        if profile in book.people_read_book.all():\n            book.people_read_book.remove(profile)\n        elif profile in book.people_want_to_read_book.all():\n            book.people_want_to_read_book.remove(profile)\n        elif profile in book.people_reading_book.all():\n            book.people_reading_book.remove(profile)\n\n        # determine the new group of the user and then add it to him\n        can_like = \"False\"\n        if status == \"read\":\n            book.people_read_book.add(profile)\n            can_like = \"True\"\n        elif status == \"reading\":\n            book.people_reading_book.add(profile)\n            can_like = \"True\"\n        elif status == \"want-to-read\":\n            book.people_want_to_read_book.add(profile)\n    except KeyError as e:\n        print(\"Internal error, key not found: \",  e.with_traceback())\n        pass\n\n    response = {'status': \"OK\", 'can_like': can_like, \"id\": id, }\n    return HttpResponse(json.dumps(response), content_type=\"application/json\")\n\n\n@login_required\n@require_POST\ndef add_book(request):\n    data = json.loads(request.body.decode(\"utf-8\"))\n\n    group_book = data.get(\"volumeInfo\")\n\n    # extract data from the book\n    book_title = group_book.get(\"title\")\n    book_author = group_book.get(\"authors\")[0]\n    book_release_year = group_book.get(\"publishedDate\")[:4]\n    book_description = group_book.get(\"description\")\n    book_isbn = group_book.get(\"industryIdentifiers\")[0].get(\"identifier\")\n\n    book_page_count = group_book.get(\"pageCount\")\n    book_language_code = group_book.get(\"language\")\n\n    # check if the values exist, and if not, set blank for them\n\n    # check if categories exist:\n    if group_book.get(\"categories\"):\n        book_categories = group_book.get(\"categories\")   # a list of all the categories this book belongs to\n    else:\n        book_categories = [\"\"]\n\n    try:\n        book_cover_url = group_book.get(\"imageLinks\").get(\"thumbnail\")\n    except AttributeError:\n        # set the default book cover image\n        book_cover_url = None\n    # create the book model, but first, see if this book already exists, and if yes, don't save it, but instead use\n    # the old book model instance\n    try:\n        book_instance = Book.objects.get(book_name=book_title, book_author=book_author) or \\\n                        Book.objects.get(book_name=str(book_title).lower(), book_author=book_author)\n        return JsonResponse({'status': 'already_exists', 'id': book_instance.id})\n    except:\n        # if book does not exist\n        # download the cover url, and store the path\n        try:\n            image_path = \"/home/flohop/PycharmProjects/bookclub_project/images/book_covers/\" + \\\n                         str(book_title).lower().replace(\" \", \"_\") + \\\n                         \"_\" + str(book_author).lower().replace(\" \", \"_\") + \".jpeg\"\n\n            urllib.request.urlretrieve(book_cover_url, image_path)\n        except:\n            image_path = None\n\n        # if not old instance exists, create a new book instance\n\n        # book titles that contain \" don't work atm, fix later\n        book_title = str(book_title).replace('\"', \"\").replace(\"'\", \"\")\n        book_instance = Book.objects.create(book_name=book_title,\n                                            book_author=book_author,\n                                            book_description=book_description,\n                                            book_release_year=book_release_year,\n                                            book_isbn_number=book_isbn,\n                                            book_page_number=book_page_count,\n                                            book_cover_image=image_path,\n                                            book_language=book_language_code,\n                                            book_categories=\" \".join(str(category) for category in book_categories))\n\n        # for TESTING, remove book from database immediately\n\n        return_book_json = {\n            'status': 'new_book',\n            'title': str(book_instance.book_name).replace(\" \", \"-\").replace(\"(\", \"\").replace(\")\", \"\"),\n            'id': str(book_instance.id),\n            'url': str(book_instance.get_absolute_url()),\n            'author': str(book_instance.book_author),\n        }\n\n        return JsonResponse(return_book_json)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- book/views.py	(revision c2257d9d8ad90fd85ba7bef28b96821f7984a2d1)
+++ book/views.py	(date 1587037691227)
@@ -242,8 +242,8 @@
     # create the book model, but first, see if this book already exists, and if yes, don't save it, but instead use
     # the old book model instance
     try:
-        book_instance = Book.objects.get(book_name=book_title, book_author=book_author) or \
-                        Book.objects.get(book_name=str(book_title).lower(), book_author=book_author)
+        book_instance = Book.objects.get(book_name=book_title, book_author=book_author)
+        book_instance = Book.objects.get(book_name=book_title, book_author=book_author)
         return JsonResponse({'status': 'already_exists', 'id': book_instance.id})
     except:
         # if book does not exist
@@ -271,14 +271,13 @@
                                             book_language=book_language_code,
                                             book_categories=" ".join(str(category) for category in book_categories))
 
-        # for TESTING, remove book from database immediately
-
         return_book_json = {
             'status': 'new_book',
             'title': str(book_instance.book_name).replace(" ", "-").replace("(", "").replace(")", ""),
             'id': str(book_instance.id),
             'url': str(book_instance.get_absolute_url()),
             'author': str(book_instance.book_author),
+            'cover': str(image_path),
         }
 
         return JsonResponse(return_book_json)
Index: book/templates/book/list_view.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base_slim.html\" %}\n{% load js %}\n{% load static %}\n{% load thumbnail %}\n{% block title %}All books\n{% endblock %}\n{% block css %}\n<style>\n    .hide {\n        visibility:hidden;\n    }\n    .remove {\n        visibility: hidden;\n        display: none;\n\n    }\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/list_view.css' %}\"/>\n{% endblock %}\n{% block content %}\n\n<label for=\"search\">New Book: </label>\n        <input type=\"text\" placeholder=\"Book\" id=\"search\" value=\"Das Lied von Eis und Feuer 0\" />\n        <button type=\"button\" id=\"button\">Search</button>\n        <br />\n\n        <div id=\"results\"></div>\n        <table id=\"results-table\" class=\"hide\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Book name</th>\n                <th scope=\"col\">Book author</th>\n            </tr>\n        </thead>\n        <tbody class=\"table body\">\n\n        </tbody>\n        </table>\n\n<ul class=\"all-books\" id=\"book-list\">\n    {% for book in books %}\n    <div class=\"container\" id=\"container\">\n        <div class=\"book {{ book.book_name | class_like }}\">\n            <li id=\"options\" class=\"item\" data-index=\"{{ book.index }}\" data-id=\"{{ book.id }}\">\n            {% thumbnail book.book_cover_image \"125x125\" as im %}\n                <img src=\"{{ im.url }}\" class=\"book-cover\">\n                {% endthumbnail %}\n                \n            <ul class=\"inner-ul\">\n            <li class=\"inner-li\">\n            <a href=\"{{ book.get_absolute_url }}\" class=\"book-title\">{{ book.book_name }}</a> \n            </li>\n\n           \n\n            <li class=\"inner-li\">\n            <span class=\"author\">{{ book.book_author }} </span>\n            </li>\n\n            <li class=\"inner-li\">\n                <span class=\"count\">\n                    <span class=\"total\">{{ book.like_balance }}</span>\n                    like{{ book.like_balance|pluralize }}\n                    </span>\n                \n                <a href=\"#\" data-id=\"{{ book.id }}\" data-action=\"{% if book.user_liked_book %}un{% endif %}like\"\n                class=\"like button{% if book.can_like %}{% else %} hide{%endif%}\">\n                    {% if not book.user_liked_book %}\n                        Like\n                    {% else %}\n                        Unlike\n                    {% endif %}\n                </a>\n            </li>\n\n            <li class=\"inner-li\">    \n                <select id=\"book-status\" class=\"book-status\">\n                <option value=\"reading\" class=\"status\">Currently reading</option>\n                <option value=\"read\" class=\"status\">Read</option>\n                <option value=\"want-to-read\" class=\"status\">Want to read</option>\n                <option value=\"blank\" selected=\"selected\"></option>\n                </select>\n            </li>\n            </ul>    \n            </li>\n        </div>\n    </div>\n    {% endfor %}\n</ul>\n<!-- load variables for the external JavaScript file -->\n<script>\n    var book_change_status_url = '{% url \"book:change_status\" %}';\n    var book_like_url = '{% url \"book:like\" %}';\n</script>\n{% endblock  %}\n\n\n{% block domready %}\n\n    var changedStatusBooks;\n    var books = {{  book_data | js }};\n    // first, set the drop down value based on the users library\n    (function (){\n\n        changedStatusBooks = {};\n        var counter = {{ books.count }}\n        for(i=0; i < counter; i++) {\n            var currentBook = books[i];\n\n            // use the same tactic as in the template tag, to get the correct class name of the elements\n            var bookName = ((((((currentBook.name.split(\" \").join(\"-\")).split('\"').join(\"\"))\n                                              .split(\"?\").join(\"\")).split(\"!\").join(\"\"))\n                                              .split(\"(\").join(\"\")).split(\")\").join(\"\"))\n                                              .split(\",\").join(\"\");\n            if(currentBook.status == \"read\"){\n                console.log(\"Read: \" + bookName);\n                $(\".\" + bookName).find(\"#book-status\").val(\"read\");\n            }\n            else if(currentBook.status == \"reading\"){\n                console.log(\"Reading: \" + bookName);\n                $(\".\" + bookName).find(\"#book-status\").val(\"reading\");\n            }\n            else if(currentBook.status == \"want-to-read\"){\n                console.log(\"Want to read: \" + bookName);\n                $(\".\" + bookName).find(\"#book-status\").val(\"want-to-read\");\n            }\n            else {\n                $(\".\" + bookName).find(\"#book-status\").val(\"blank\");\n            }\n\n        }   // end for loop\n    }())\n\n\n\n    function sendValuesToServer(e) {\n        target = e.target;\n        if($(target).hasClass(\"book-status\")){\n            value = target.value;\n            id = $(target).parent().data(\"id\");\n\n            $.post('{% url \"book:change_status\" %}',\n            {\n                    id : id,\n                    value: value\n            },\n            function(data){\n            if (data['status'] == 'OK')\n                {\n                if(data['can_like'] == \"True\") {\n                    var bookId = data['id'];\n                    $('li').find(\"[data-id='\" + bookId + \"']\").removeClass(\"hide\")\n                }\n                else {\n                    var bookId = data['id'];\n                    $('li').find(\"[data-id='\" + bookId + \"']\").addClass(\"hide\")\n                }\n                }\n            }\n        );\n        }\n    }\n\n    // register like button, so that it changes the like amount and the text\n    $('a.like').click(function(e){\n    e.preventDefault();\n    $.post('{% url \"book:like\" %}',\n        {\n            id: $(this).data('id'),\n            action: $(this).data('action')\n        },\n        function(data){\n        if (data['status'] == 'ok')\n            {\n                var bookId = data['id'];\n                var prevAction = data['prev_action']\n                var $clickedElement = $(\"[data-id=\" + bookId + \"]\");\n\n                // toggle action\n                $clickedElement.data('action', prevAction == 'like' ?\n                                    'unlike': 'like');\n                // toggle link text\n                $clickedElement.find(\"a.like\").text(prevAction == 'like' ? 'Unlike' : 'Like');\n\n                // update total likes\n                var prevLikes = parseInt($($clickedElement.prev().find(\".total\")).text());\n\n                $($clickedElement.prev().find(\".total\")).text(prevAction == 'like' ?\n                prevLikes + 1 : prevLikes - 1);\n            }\n        }\n        );\n    });\n    document.getElementById(\"book-list\").addEventListener(\"change\", sendValuesToServer, false);\n\n{% endblock %}\n\n{% block javascript %}\n<script src=\"{% static 'book/book_search_add_list.js' %}\"></script>\n{% endblock %}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- book/templates/book/list_view.html	(revision c2257d9d8ad90fd85ba7bef28b96821f7984a2d1)
+++ book/templates/book/list_view.html	(date 1587036829466)
@@ -51,8 +51,6 @@
             <a href="{{ book.get_absolute_url }}" class="book-title">{{ book.book_name }}</a> 
             </li>
 
-           
-
             <li class="inner-li">
             <span class="author">{{ book.book_author }} </span>
             </li>
